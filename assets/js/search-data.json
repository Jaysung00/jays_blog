{
  
    
        "post0": {
            "title": "Analyzing Marketing Campaigns with pandas ①",
            "content": ". &#12510;&#12540;&#12465;&#12486;&#12451;&#12531;&#12464;&#12481;&#12540;&#12512;&#12391;&#12487;&#12540;&#12479;&#12469;&#12452;&#12456;&#12531;&#12486;&#12451;&#12473;&#12488;&#12364;&#12420;&#12427;&#12371;&#12392; . マーケッティングキャンペーンの効果分析 &amp; ターゲッティング | マーケッティングチャネルの転換率や収益を考慮し、妥当性を分析 | A/B テストを行う | . . Import Data . import pandas as pd marketing = pd.read_csv(&#39;./dataset/marketing.csv&#39;) . &#12487;&#12540;&#12479;&#12434;&#30906;&#35469; . marketing.head() . user_id date_served marketing_channel variant converted language_displayed language_preferred age_group date_subscribed date_canceled subscribing_channel is_retained . 0 a100000029 | 1/1/18 | House Ads | personalization | True | English | English | 0-18 years | 1/1/18 | NaN | House Ads | True | . 1 a100000030 | 1/1/18 | House Ads | personalization | True | English | English | 19-24 years | 1/1/18 | NaN | House Ads | True | . 2 a100000031 | 1/1/18 | House Ads | personalization | True | English | English | 24-30 years | 1/1/18 | NaN | House Ads | True | . 3 a100000032 | 1/1/18 | House Ads | personalization | True | English | English | 30-36 years | 1/1/18 | NaN | House Ads | True | . 4 a100000033 | 1/1/18 | House Ads | personalization | True | English | English | 36-45 years | 1/1/18 | NaN | House Ads | True | . marketing.describe() . user_id date_served marketing_channel variant converted language_displayed language_preferred age_group date_subscribed date_canceled subscribing_channel is_retained . count 10037 | 10021 | 10022 | 10037 | 10022 | 10037 | 10037 | 10037 | 1856 | 577 | 1856 | 1856 | . unique 7309 | 31 | 5 | 2 | 2 | 4 | 4 | 7 | 31 | 115 | 5 | 2 | . top a100000882 | 1/15/18 | House Ads | control | False | English | English | 19-24 years | 1/16/18 | 4/2/18 | Instagram | True | . freq 12 | 789 | 4733 | 5091 | 8946 | 9793 | 9275 | 1682 | 163 | 15 | 600 | 1279 | . marketing.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 10037 entries, 0 to 10036 Data columns (total 12 columns): # Column Non-Null Count Dtype -- -- 0 user_id 10037 non-null object 1 date_served 10021 non-null object 2 marketing_channel 10022 non-null object 3 variant 10037 non-null object 4 converted 10022 non-null object 5 language_displayed 10037 non-null object 6 language_preferred 10037 non-null object 7 age_group 10037 non-null object 8 date_subscribed 1856 non-null object 9 date_canceled 577 non-null object 10 subscribing_channel 1856 non-null object 11 is_retained 1856 non-null object dtypes: object(12) memory usage: 941.1+ KB . &#21015;&#12372;&#12392;&#12395;&#12487;&#12540;&#12479;&#22411;&#12434;&#26356;&#26032;&#12377;&#12427; . &#12487;&#12540;&#12479;&#22411;&#12398;&#22793;&#25563; . print(marketing[&#39;is_retained&#39;].dtype) . object . marketing[&#39;is_retained&#39;] = marketing[&#39;is_retained&#39;].astype(&#39;bool&#39;) # Check the data type of is_retained, again print(marketing[&#39;is_retained&#39;].dtype) . bool . &#26032;&#12375;&#12356;&#21015;&#12398;&#36861;&#21152; . channel_dict = {&quot;House Ads&quot;: 1, &quot;Instagram&quot;: 2, &quot;Facebook&quot;: 3, &quot;Email&quot;: 4, &quot;Push&quot;: 5} # チャネルをコードにMappingする marketing[&#39;channel_code&#39;] = marketing[&#39;subscribing_channel&#39;].map(channel_dict) . marketing[[&#39;subscribing_channel&#39;, &#39;channel_code&#39;]] . subscribing_channel channel_code . 0 House Ads | 1.0 | . 1 House Ads | 1.0 | . 2 House Ads | 1.0 | . 3 House Ads | 1.0 | . 4 House Ads | 1.0 | . ... ... | ... | . 10032 Email | 4.0 | . 10033 Email | 4.0 | . 10034 Email | 4.0 | . 10035 Email | 4.0 | . 10036 Email | 4.0 | . 10037 rows × 2 columns . import numpy as np # 列同士の一致有無を表す列を追加 marketing[&#39;is_correct_lang&#39;] = np.where( marketing[&#39;language_preferred&#39;] == marketing[&#39;language_displayed&#39;], &#39;Yes&#39;, &#39;No&#39; ) # 結果 marketing[[&#39;language_preferred&#39;, &#39;language_displayed&#39;, &#39;is_correct_lang&#39;]] . language_preferred language_displayed is_correct_lang . 0 English | English | Yes | . 1 English | English | Yes | . 2 English | English | Yes | . 3 English | English | Yes | . 4 English | English | Yes | . ... ... | ... | ... | . 10032 German | German | Yes | . 10033 German | German | Yes | . 10034 German | German | Yes | . 10035 German | German | Yes | . 10036 German | German | Yes | . 10037 rows × 3 columns . # marketing = pd.read_csv(&#39;./dataset/marketing.csv&#39;, # parse_dates = [&#39;date_served&#39;, &#39;date_subscribed&#39;, &#39;date_canceled&#39;]) # 曜日の列を数字で表した列追加 # 月曜日:0, ... ,日曜日:6 marketing_with_date[&#39;DoW&#39;] = marketing_with_date[&#39;date_subscribed&#39;].dt.dayofweek #結果 marketing_with_date[[&#39;date_subscribed&#39;, &#39;DoW&#39;]] . date_subscribed DoW . 0 2018-01-01 | 0.0 | . 1 2018-01-01 | 0.0 | . 2 2018-01-01 | 0.0 | . 3 2018-01-01 | 0.0 | . 4 2018-01-01 | 0.0 | . ... ... | ... | . 10032 2018-01-17 | 2.0 | . 10033 2018-01-17 | 2.0 | . 10034 2018-01-17 | 2.0 | . 10035 2018-01-17 | 2.0 | . 10036 2018-01-17 | 2.0 | . 10037 rows × 2 columns . &#25506;&#32034;&#30340;&#12487;&#12540;&#12479;&#35299;&#26512;&#65288;EDA&#65289; . daily_users = marketing.groupby([&#39;date_served&#39;])[&#39;user_id&#39;].nunique() # print head print(daily_users.head()) . date_served 1/1/18 362 1/10/18 337 1/11/18 310 1/12/18 301 1/13/18 306 Name: user_id, dtype: int64 . import matplotlib.pyplot as plt # Plot daily_subscribers daily_users.plot() # Include a title and y-axis label plt.title(&#39;Daily users&#39;) plt.ylabel(&#39;Number of users&#39;) # Rotate the x-axis labels by 45 degrees plt.xticks(rotation = 45) # Display the plot plt.show() .",
            "url": "https://jaysung00.github.io/jays_blog/datacamp/2021/02/02/Marketing-1.pandas.html",
            "relUrl": "/datacamp/2021/02/02/Marketing-1.pandas.html",
            "date": " • Feb 2, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jaysung00.github.io/jays_blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jaysung00.github.io/jays_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jaysung00.github.io/jays_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}