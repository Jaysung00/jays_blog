{
  
    
        "post0": {
            "title": "Bayesian Networkとは何か？ ①",
            "content": ". &#12505;&#12452;&#12472;&#12450;&#12531;&#12493;&#12483;&#12488;&#12527;&#12540;&#12463;&#65288;BN; Bayesian Network&#65289;&#12392;&#12399;? . 確率変数（RV;Random variables）間の条件付き独立などの関係を見せることにより、RVのfull joint distributionなどを簡潔に表現できるグラフ表記法（Graphical Notation）である。 | . . &#29992;&#35486;&#12398;&#35500;&#26126; . ここで グラフ（Graph） とは、数学においてチャート（Chart）と対照されて定義された nodeとedgeの集合 . | edgeの方向が指定されていればdirected、そうでなければundirected . | グラフの全てのedgeがdirectedの時、directed graph . | directed edgeにおいて、始まる側のノードをparent nodeとし、反対側はchild nodeと言う。 . | つながっている複数のdirected edgeの方向が同じ場合、これをdirected pathとし、directed pathの最初のノードは経路上のすべてのノードのancestor nodeであり、逆に残りのノードは最初のノードのdescendant nodeである。 . | directed pathの開始点と終了点が一致する場合はこれをcyclic、そうでない場合はacyclicと呼ぶ。 . | . . &#12505;&#12540;&#12472;&#12517;&#12450;&#12531;&#12493;&#12483;&#12488;&#12527;&#12540;&#12463;&#65288;BN&#65289; &#12398;&#26465;&#20214; . NetworkはNodeと彼らを繋ぐEdgeで構成されている。 . | 方向性の非循環グラフ（DAG; Directed Acyclic Graph）である。 . | 個別のNodeはRVである$X$に対して$ bf P(X | Paranets(X))$を意味する。 . | 個別のEdgeとは親が子供に与える直接的な影響（Direct Influence） を意味する。 . | . . . &#12414;&#12378;&#30906;&#29575;&#12395;&#38306;&#12377;&#12427;&#31777;&#21336;&#12394;&#24489;&#32722;&#12363;&#12425; . ベージュアンネットワークというものは結局確率変数（RV）間の関係を表現したものである。 | 確率というのは相対的な頻度である。 | . . 独立性 （Independence） . $P(A|B) = P(A)$ $ Leftrightarrow P(A,B) = P(A)P(B)$ $ Leftrightarrow P(B|A) = P(B) $; A とB が独立ならば、B はA と独立である。 . 事象Bが発生したという情報は、事象Aが発生する確率に追加的な情報を提供しない。 . | これは、下述のConditional Independence と対立する意味で Marginal Independence と言える。 . | . | . . 条件付き独立（Conditional Independence） . $P(A|B,C) = P(A|C)$ . 事象Cが与えられたときに二つの事象AとBが独立なら、これはCという条件の下で条件付き独立 である。 | . | . . 条件付き確率（Conditional Probability） . $P(A= true|B=true)$ . &quot;Probablity of A given B&quot; . | Bが与えられた時、Aの確率 . | . | . 結合確率（joint Probability） . $P(A= true, B=true)$ . &quot;the probability of A=true and B=true&quot; . | A=trueとB=trueが同時に満足できる確率 . | 条件付き確率と結合確率の関係は一般に、$P(X|Y) = cfrac{P(X,Y)}{P(Y)}$ . | . | . 総確率法則（Law of Total Probability） . &quot;Summing out&quot; or &quot;Marginalization&quot; . | $P(A) = sum_kP(A,B_k) = sum_kP(A|B_k)P(B_k)$ . $P(A) = sum_kP(A,B_k)$は$B_1,B_2,...,B_n$がそれぞれ相互背反的な集合であり、これらの和集合が全体集合となるので成立（marginalize） . | $ sum_kP(A,B_k) = sum_kP(A|B_k)P(B_k)$は条件付き確率と結合確率の関係を利用すると誘導可能 . | . | これによる利点は、$P(A)$を直接求めるより、$P(A|B_k)$のような条件付き確率を求めて合わせることが一般的により容易であることである。 . | あるいは結合確率を知っている時、様々な確率が計算できる。 . 例えば、結合確率である$P(a,b,c,d)$を知っているとき、$P(c|b)$は以下のように表せる。 . | $P(c|b) = sum_a sum_d P(a,c,d|b) = cfrac{1}{P(b)} sum_a sum_d { bf P(a,b,c,d)}$ . | しかし、jointの場合にはparameterの数がexponentialに増えることになる！ （Chain Ruleの必要性） . | . | . . 確率の連鎖法則（Chain Rule for probability） . 全てのjoint distribution について、結合確率と条件付き確率の関係により常に以下のように表せる。 . | $P(a,b,c,...,z) = P(a|b,c,...,z)P(b,c,....,z)$ . | これを繰り返すと、$P(a,b,c,...,z) = P(a|b,c,...,z)P(b|c,...,z)P(c|d,...,z)...P(z)$で表現可能（Factorization） . | . . 乗分解法則（Rule of product decomposition） . Bayesian Networkでは、グラフに属するRVの結合分布（joint distribution）は、familyのすべての条件付き分布$P(Child|Parent)$の乗$^{[*1]}$で表現できる。 （次のポストのFactorization of Bayes Networkの内容を参照されたい） . | $P(x_1,x_2,...,x_n) = prod _iP(x_i|Parents(x_i))$ （Parentsは直接的に接続されて影響を受ける変数だけを意味） . 例えば、$X rightarrow Y rightarrow Z$ のグラフで$P(X=x,Y=y,Z=z)$を求めることを考えてみよう . | 本来は可能なすべての組み合わせの$(x, y, z)$に該当する確率テーブルを作らなければならない . | しかし、この法則を利用すると$P(X=x,Y=y,Z=z) = P(X=x)P(Y=y|X=x)P(Z=z|Y=y)$で簡潔に表現可能 . | このように高次元を低次元にすることで次元の呪い（curse of dimensionality）からも比較的自由になることができる。 . | . | . . $^{[*1]}:$ このように表現可能な理由は、後述するベイジアンネットワークのTypical Local Structures Rules に関連している。 . . &#12505;&#12452;&#12472;&#12450;&#12531;&#12493;&#12483;&#12488;&#12527;&#12540;&#12463;&#12398;Rules of Typical Local Structures . . Rule 1. 鎖または滝型（Chain or Cascading） . . 変数$X$と変数$Y$の間で一つの方向性経路だけがあって変数$Z$が当該経路を塞いでいるとき、$Z$が条件付きで与えられると、二つの変数$X$と$Y$は条件付き独立 である。 . | $X perp Y|Z$ $ Leftrightarrow P(Y|X,Z) = P(Y|Z)$ . | . . Rule 2. 分岐あるいは共通の親型（Fork or Common parent） . . 変数$Z$が$X$と$Y$の共通原因で、$X$と$Y$の間にたった一つの経路があるとき、$Z$の条件が与えられると、$X$と$Y$は条件付き独立 である。 . | $X perp Y|Z$ $ Leftrightarrow P(X,Y|Z) = P(X|Z)P(Y|Z)$ . | . . Rule 3.衝突部あるいはV-構造(Collider or V-structure) . . 変数$Z$が二つの変数$X$と$Y$の間の衝突ノードで、$X$と$Y$の間でたった一つの経路だけあるとき、$X$と$Y$は非条件付き独立（underconditionally independent） である。しかし、$Z$または$Z$のdescendantを条件付きにした場合、$X$と$Y$は従属となる可能性 がある。 . | $ sim (X perp Y|Z)$ $ Leftrightarrow P(X,Y,Z)=P(X)P(Y)P(Z|X,Y)$ . | つまり$Z$が not given の時は独立だが、逆に$Z$がgivenで与えられれば$X$、$Y$が従属となる可能性が生じてしまう。 . | . . . Bayes Ball Algorithm . 目的：$X perp Y | Z$（$Z$がgivenの場合、$X$と$Y$が独立）が成立するかどうかを判定するためのアルゴリズム . | $X$からボールが出発すると仮定した時、 $Y$までボールが到達するかを確認する方法 . | ここでボールはInformationを意味し、矢印はボールの動きを意味する。ノード間が直接的なedgeで結ばれていなくても、ボールが転がって到達できるならIndirect influenceが存在するため、2つの変数はdepedentであることを意味する。 . | . . Rule 1の場合 . (1) $Z$がgivenでない時、ボールは通ることができる。 ($X, Y$は従属) . . (2) $Z$が given の時、ボールは通れない。 ($X perp Y|Z$) . . . Rule 2の場合 . (1) $Z$がgivenでない時、ボールは通ることができる。 ($X, Y$は従属) . . (2) $Z$が given の時、ボールは通れない。 ($X perp Y|Z$) . . . Rule 3の場合 . (1) $Z$が givenでない時、ボールは通れない。 ($ bf X perp Y$) . . (2) $X_C$がgivenであるとき、逆にpathができてボールが通ることができるようになる。 ($X, Y$は従属 $|Z$) . . . . Bayes Ball Algorithm&#12398;&#20363;&#38988; . . 問題 1. $X_1 perp X_4|X_2$ . 二つの経路でボールを転がすことができる。 . (1) $X_1 rightarrow{ bf X_2} (given) rightarrow X_4$の経路は$X_2$が鎖のgivenで塞がれているので通ることができない。 . (2) $X_1 rightarrow X_3 rightarrow X_5 rightarrow X_6 leftarrow{ bf X_2}(given) rightarrow X_4$の経路は$X_6$が衝突部のnot givenで塞がれているので通ることができない。 . 従って、いかなる経路でもボールは通れないので$X_2$がgivenのとき$X_1$と$X_4$は独立 である。 . | . . 問題 2. $X_2 perp X_5|X_1$ | . 二つの経路でボールを転がすことができる。 . (1) $X_2 rightarrow X_6 leftarrow X_5$ の経路は$X_6$が衝突部のnot givenで塞がれているので通れない。 . (2) $X_2 leftarrow{ bf X_1}(given) rightarrow X_3 rightarrow X_5$の経路は$X_1$が分岐のdivenで塞がれているので通れない。 . 従って、どんな経路でもボールは通れないので$X_1$がgivenのとき$X_2$と$X_5$は独立 である。 . . 問題 3. $X_1 perp X_6| {X_2, X_3 } $ | . 二つの経路でボールを転がすことができる。 . (1) $X_1 rightarrow{ bf X_2}(given) rightarrow X_6$の経路は$X_2$が鎖のgivenで塞がれているので通ることができない。 . (2) $X_1 rightarrow{ bf X_3}(given) rightarrow X_5 rightarrow X_6$の経路は$X_3$が鎖のgivenで塞がれているので通れない。 . 従って、いかなる経路でもボールは通れないので、$ {X_2, X_3 }$がgivenのとき$X_1$と$X_6$は独立 である。 . . 問題 4. $X_2 perp X_3| {X_1, X_6 } $ | . 二つの経路でボールを転がすことができる。 . (1) $X_2 leftarrow{ bf X_1}(given) rightarrow X_3$ の経路は$X_1$が分岐のgivenで塞がれているので通れない。 . (2) $X_2 rightarrow{ bf X_6}(given) leftarrow X_5 leftarrow X_3$の経路は$X_6$が衝突部のgivenで開いているので通ることができる。 . 従って、二番目のパスでボールは通過できるので、$ {X_1, X_6 }$がgivenのとき$X_2$と$X_3$は独立が成立しない。 . . . $d$-Seperation&#12398;&#23450;&#32681; . $d$は方向性（directly）を意味する。 . | Bayesian Ball Algorithmで$d$-Seperationかどうかを確認することができる。 . | 整理すると、パスpが条件付き集合 $ {W }$により$d$-Seperateされるという命題は以下と必要十分条件である。 . 1.経路pは条件付き集合 $ {W }$に属する中間ノード$Z$の鎖$X rightarrow Z rightarrow Y$または分岐$X leftarrow Z rightarrow Y$を含む。 . 2.経路pは条件付き集合 $ {W }$に属さない中間ノード$Z&#39;$の衝突部$X rightarrow Z&#39; leftarrow Y$を含む。 . | . . . Additional reference . [1] Judea Pearl, Madelyn Glymour, Nicholas P. Jewell (2016). Causal Inference in Statistics: A Primer . . このシリーズの別のポストを見るには . 　　　[Next &gt;&gt;] .",
            "url": "https://jaysung00.github.io/jays_blog/bayesian_network/2021/02/08/Bayesian-Network-1.html",
            "relUrl": "/bayesian_network/2021/02/08/Bayesian-Network-1.html",
            "date": " • Feb 8, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Market Basket Analysis in Python ①",
            "content": ". &#12496;&#12473;&#12465;&#12483;&#12488;&#20998;&#26512;&#12392;&#12399;&#65311; . バスケット分析によって以下のようなことができる。 . 1. &#20341;&#22770;&#20998;&#26512; . 一回の買い物でよく一緒に買われるものは何か？ . 2. &#20341;&#22770;&#20998;&#26512;&#12395;&#22522;&#12389;&#12356;&#12390;&#26377;&#29992;&#12394;&#25512;&#22888;&#20107;&#38917;&#12398;&#25552;&#20379; . e.g. ・棚の近くに置くべき商品カテゴリー ・棚の遠くに置くべき商品カテゴリー など . . &#12496;&#12473;&#12465;&#12483;&#12488;&#20998;&#26512;&#12398;&#20351;&#29992;&#20363; . e.g. ・Netflixスタイルの推奨エンジン ・eコマースにおける商品推奨の改善 ・小売店でのクロスセル（Cross-sell$^{[*1]}$）製品 ・在庫管理の改善 ・アップセル（Up-sell$^{[*2]}$）するアイテム選択　など . . $^{[*1]}$ Cross-sell : 顧客が購買する、あるいはすでに利用している製品・サービスに関連するものを販売していくこと $^{[*2]}$ Up-sell : 顧客が検討しているものよりランクの高い製品・サービスの販売をすること&lt;/p&gt; &lt;/span&gt; . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . &#12496;&#12473;&#12465;&#12483;&#12488;&#20998;&#26512;&#12398;&#26041;&#27861; . Association Rule によって構成される . ・{A} $ rightarrow$ {B} . 「Aを買うと、Bを買う」という意味 . . (&#23455;&#35013;) &#12463;&#12525;&#12523;&#12475;&#12523;&#35069;&#21697;&#36984;&#25246; . 小売店ではガムをコーヒーかシリアルかパンかどれかとクロスセルしようとしている。 . ・{coffee} $ rightarrow$ {gum} ・{cereal} $ rightarrow$ {gum} ・{bread} $ rightarrow$ {gum} のうち、最も関係性が強いものを選びたい。 . . transactionsは [&#39;coffee&#39;,&#39;gum&#39;] &amp; [&#39;cereal&#39;,&#39;gum&#39;] &amp; [&#39;bread&#39;,&#39;gum&#39;] の３つのペアからなっている。 . # import &amp; read data import matplotlib.pyplot as plt import pandas as pd import numpy as np transactions = pd.read_csv(&#39;./dataset/transactions.csv&#39;, header=None) transactions . 0 1 . 0 bread | gum | . 1 bread | gum | . 2 cereal | gum | . 3 coffee | gum | . 4 bread | gum | . ... ... | ... | . 80 bread | gum | . 81 coffee | gum | . 82 bread | gum | . 83 coffee | gum | . 84 coffee | gum | . 85 rows × 2 columns . 各ペアの数をカウントする . # Count the number of transactions with coffee and gum coffee = transactions[(transactions[0] == &#39;coffee&#39;) &amp; (transactions[1] == &#39;gum&#39;)] # Count the number of transactions with cereal and gum cereal = transactions[(transactions[0] == &#39;cereal&#39;) &amp; (transactions[1] == &#39;gum&#39;)] # Count the number of transactions with bread and gum bread = transactions[(transactions[0] == &#39;bread&#39;) &amp; (transactions[1] == &#39;gum&#39;)] # Print the counts for each transaction. print(&#39;coffee:&#39;, len(coffee)) print(&#39;cereal:&#39;, len(cereal)) print(&#39;bread:&#39;, len(bread)) . coffee: 40 cereal: 25 bread: 20 . . Association Rules&#12398;&#20840;&#12390;&#12398;&#20505;&#35036;&#12434;&#30906;&#35469;&#12377;&#12427; . &#12487;&#12540;&#12479;&#12398;&#28310;&#20633; . 小売店の併売データを読み込む . # Load transactions from pandas groceries = pd.read_csv(&#39;./dataset/small_grocery_store.csv&#39;) # Split transaction strings into lists transactions = groceries[&#39;Transaction&#39;].apply(lambda t: t.split(&#39;,&#39;)) # Convert DataFrame column into list of strings transactions = list(transactions) # Print the list of transactions print(transactions) . [[&#39;milk&#39;, &#39;bread&#39;, &#39;biscuit&#39;], [&#39;bread&#39;, &#39;milk&#39;, &#39;biscuit&#39;, &#39;cereal&#39;], [&#39;bread&#39;, &#39;tea&#39;], [&#39;jam&#39;, &#39;bread&#39;, &#39;milk&#39;], [&#39;tea&#39;, &#39;biscuit&#39;], [&#39;bread&#39;, &#39;tea&#39;], [&#39;tea&#39;, &#39;cereal&#39;], [&#39;bread&#39;, &#39;tea&#39;, &#39;biscuit&#39;], [&#39;jam&#39;, &#39;bread&#39;, &#39;tea&#39;], [&#39;bread&#39;, &#39;milk&#39;], [&#39;coffee&#39;, &#39;orange&#39;, &#39;biscuit&#39;, &#39;cereal&#39;], [&#39;coffee&#39;, &#39;orange&#39;, &#39;biscuit&#39;, &#39;cereal&#39;], [&#39;coffee&#39;, &#39;sugar&#39;], [&#39;bread&#39;, &#39;coffee&#39;, &#39;orange&#39;], [&#39;bread&#39;, &#39;sugar&#39;, &#39;biscuit&#39;], [&#39;coffee&#39;, &#39;sugar&#39;, &#39;cereal&#39;], [&#39;bread&#39;, &#39;sugar&#39;, &#39;biscuit&#39;], [&#39;bread&#39;, &#39;coffee&#39;, &#39;sugar&#39;], [&#39;bread&#39;, &#39;coffee&#39;, &#39;sugar&#39;], [&#39;tea&#39;, &#39;milk&#39;, &#39;coffee&#39;, &#39;cereal&#39;]] . Association rules&#12398;&#29983;&#25104; . ９つの食料品のリストを抽出し、すべての可能な単独原因単独結果の組み合わせ（Association rules）をitertoolsを使って生成する . # Import permutations from the itertools module from itertools import permutations # Define the set of groceries flattened = [i for t in transactions for i in t] groceries = list(set(flattened)) # Generate all possible rules rules = list(permutations(groceries, 2)) # Print the set of rules print(rules) # Print the number of rules print(&#39; n&#39;) print(len(rules),&quot;通り&quot;) . [(&#39;jam&#39;, &#39;cereal&#39;), (&#39;jam&#39;, &#39;sugar&#39;), (&#39;jam&#39;, &#39;tea&#39;), (&#39;jam&#39;, &#39;orange&#39;), (&#39;jam&#39;, &#39;bread&#39;), (&#39;jam&#39;, &#39;milk&#39;), (&#39;jam&#39;, &#39;coffee&#39;), (&#39;jam&#39;, &#39;biscuit&#39;), (&#39;cereal&#39;, &#39;jam&#39;), (&#39;cereal&#39;, &#39;sugar&#39;), (&#39;cereal&#39;, &#39;tea&#39;), (&#39;cereal&#39;, &#39;orange&#39;), (&#39;cereal&#39;, &#39;bread&#39;), (&#39;cereal&#39;, &#39;milk&#39;), (&#39;cereal&#39;, &#39;coffee&#39;), (&#39;cereal&#39;, &#39;biscuit&#39;), (&#39;sugar&#39;, &#39;jam&#39;), (&#39;sugar&#39;, &#39;cereal&#39;), (&#39;sugar&#39;, &#39;tea&#39;), (&#39;sugar&#39;, &#39;orange&#39;), (&#39;sugar&#39;, &#39;bread&#39;), (&#39;sugar&#39;, &#39;milk&#39;), (&#39;sugar&#39;, &#39;coffee&#39;), (&#39;sugar&#39;, &#39;biscuit&#39;), (&#39;tea&#39;, &#39;jam&#39;), (&#39;tea&#39;, &#39;cereal&#39;), (&#39;tea&#39;, &#39;sugar&#39;), (&#39;tea&#39;, &#39;orange&#39;), (&#39;tea&#39;, &#39;bread&#39;), (&#39;tea&#39;, &#39;milk&#39;), (&#39;tea&#39;, &#39;coffee&#39;), (&#39;tea&#39;, &#39;biscuit&#39;), (&#39;orange&#39;, &#39;jam&#39;), (&#39;orange&#39;, &#39;cereal&#39;), (&#39;orange&#39;, &#39;sugar&#39;), (&#39;orange&#39;, &#39;tea&#39;), (&#39;orange&#39;, &#39;bread&#39;), (&#39;orange&#39;, &#39;milk&#39;), (&#39;orange&#39;, &#39;coffee&#39;), (&#39;orange&#39;, &#39;biscuit&#39;), (&#39;bread&#39;, &#39;jam&#39;), (&#39;bread&#39;, &#39;cereal&#39;), (&#39;bread&#39;, &#39;sugar&#39;), (&#39;bread&#39;, &#39;tea&#39;), (&#39;bread&#39;, &#39;orange&#39;), (&#39;bread&#39;, &#39;milk&#39;), (&#39;bread&#39;, &#39;coffee&#39;), (&#39;bread&#39;, &#39;biscuit&#39;), (&#39;milk&#39;, &#39;jam&#39;), (&#39;milk&#39;, &#39;cereal&#39;), (&#39;milk&#39;, &#39;sugar&#39;), (&#39;milk&#39;, &#39;tea&#39;), (&#39;milk&#39;, &#39;orange&#39;), (&#39;milk&#39;, &#39;bread&#39;), (&#39;milk&#39;, &#39;coffee&#39;), (&#39;milk&#39;, &#39;biscuit&#39;), (&#39;coffee&#39;, &#39;jam&#39;), (&#39;coffee&#39;, &#39;cereal&#39;), (&#39;coffee&#39;, &#39;sugar&#39;), (&#39;coffee&#39;, &#39;tea&#39;), (&#39;coffee&#39;, &#39;orange&#39;), (&#39;coffee&#39;, &#39;bread&#39;), (&#39;coffee&#39;, &#39;milk&#39;), (&#39;coffee&#39;, &#39;biscuit&#39;), (&#39;biscuit&#39;, &#39;jam&#39;), (&#39;biscuit&#39;, &#39;cereal&#39;), (&#39;biscuit&#39;, &#39;sugar&#39;), (&#39;biscuit&#39;, &#39;tea&#39;), (&#39;biscuit&#39;, &#39;orange&#39;), (&#39;biscuit&#39;, &#39;bread&#39;), (&#39;biscuit&#39;, &#39;milk&#39;), (&#39;biscuit&#39;, &#39;coffee&#39;)] 72 通り . . Metric &amp; Pruning . 全ての可能な組み合わせを候補として置くのは、かなり時間とコストがかかる。 そのため、有用な規則だけに絞りたい。 → Metric &amp; Pruning Process . ①Metric : Association rulesにスコアを割り当て . ②Pruning : 特定の基準に従い、基準に満たさないRulesを放棄する . One-hot encoding transaction data . # Import the transaction encoder function from mlxtend from mlxtend.preprocessing import TransactionEncoder # Instantiate transaction encoder and identify unique items encoder = TransactionEncoder().fit(transactions) # One-hot encode transactions onehot = encoder.transform(transactions) # Convert one-hot encoded data to DataFrame onehot = pd.DataFrame(onehot, columns = encoder.columns_) # Print the one-hot encoded transaction dataset print(onehot) . biscuit bread cereal coffee jam milk orange sugar tea 0 True True False False False True False False False 1 True True True False False True False False False 2 False True False False False False False False True 3 False True False False True True False False False 4 True False False False False False False False True 5 False True False False False False False False True 6 False False True False False False False False True 7 True True False False False False False False True 8 False True False False True False False False True 9 False True False False False True False False False 10 True False True True False False True False False 11 True False True True False False True False False 12 False False False True False False False True False 13 False True False True False False True False False 14 True True False False False False False True False 15 False False True True False False False True False 16 True True False False False False False True False 17 False True False True False False False True False 18 False True False True False False False True False 19 False False True True False True False False True . # Compute the support support = onehot.mean() # Print the support print(support) . biscuit 0.40 bread 0.65 cereal 0.30 coffee 0.40 jam 0.10 milk 0.25 orange 0.15 sugar 0.30 tea 0.35 dtype: float64 . # Add a jam+bread column to the DataFrame onehot onehot[&#39;jam+bread&#39;] = np.logical_and(onehot[&#39;jam&#39;], onehot[&#39;bread&#39;]) # Compute the support support = onehot.mean() # Print the support values print(support) . biscuit 0.40 bread 0.65 cereal 0.30 coffee 0.40 jam 0.10 milk 0.25 orange 0.15 sugar 0.30 tea 0.35 jam+bread 0.10 dtype: float64 . . Additional Reference JMR生活総合研究所. アップセリング（Up-selling）、クロスセリング（Cross-selling）. マーケティング用語集. https://www.jmrlsi.co.jp/knowledge/yougo/my06/my0618.html . . このシリーズの別のポストを見るには . 　　　[Next &gt;&gt;] . &lt;/div&gt; .",
            "url": "https://jaysung00.github.io/jays_blog/datacamp/2021/02/08/Basket-analysis-1.html",
            "relUrl": "/datacamp/2021/02/08/Basket-analysis-1.html",
            "date": " • Feb 8, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jaysung00.github.io/jays_blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jaysung00.github.io/jays_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jaysung00.github.io/jays_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}